import time

from .settings import (
    EMPRESA,
    INSTITUCION_OPERANTE_STP,
    TIPO_PAGO_TERCERO,
    TIPO_CUENTA_BENEFICIARIO_CLABE
)

from .utils import clean_and_cut_text, number_format, utf8_encode

class PayOrder(object):
    def __init__(self):
        timestamp = int(time.time())

        # autogenerated
        self.__clave_rastreo = clean_and_cut_text('PREXTO{}'.format(timestamp), 30)

        # autogenerated
        self.__referencia_numerica = clean_and_cut_text(timestamp, 7)

        # empresa
        self.__empresa = clean_and_cut_text(EMPRESA, 15)

        # institucion operante (siempre stp)
        self.__institucion_operante = clean_and_cut_text(INSTITUCION_OPERANTE_STP, 5)

        # tipo de pago
        self.__tipo_pago = clean_and_cut_text(TIPO_PAGO_TERCERO, 2)

        # tipo de cuenta beneficiario
        self.__tipo_cuenta_beneficiario = clean_and_cut_text(TIPO_CUENTA_BENEFICIARIO_CLABE, 2)

        # cuenta ordenante (stp la pone por default)
        self.__cuenta_ordenante = ''

        # fecha de la operacion (stp la pone por default) 
        self.__fecha_operacion = ''

        ### Campos obligatorios ####

        # cuenta clabe del beneficiarioth
        self.__cuenta_beneficiario = None

        # institucion del banco (de la parte contrar√≠a)
        self.__institucion_contraparte = None

        # concepto de pago
        self.__concepto_pago = None

        # email de beneficiario
        self.__email_beneficiario = None

        # monto de la operacion
        self.__monto = None

        # nombre del beneficiario
        self.__nombre_beneficiario = None

    @property
    def clave_rastreo(self):
        return self.__clave_rastreo

    @clave_rastreo.setter
    def clave_rastreo(self, value):
        self.__clave_rastreo = value

    @property
    def referencia_numerica(self):
        return self.__referencia_numerica

    @referencia_numerica.setter
    def referencia_numerica(self, value):
        self.__referencia_numerica = value

    @property
    def empresa(self):
        return self.__empresa

    @property
    def institucion_operante(self):
        return self.__institucion_operante

    @property
    def tipo_pago(self):
        return self.__tipo_pago

    @property
    def tipo_cuenta_beneficiario(self):
        return self.__tipo_cuenta_beneficiario

    @property
    def cuenta_ordenante(self):
        return self.__cuenta_ordenante

    @property
    def fecha_operacion(self):
        return self.__fecha_operacion

    @property
    def rfc_curp_beneficiario(self):
        return self.__rfc_curp_beneficiario

    @rfc_curp_beneficiario.setter
    def rfc_curp_beneficiario(self, value):
        self.__rfc_curp_beneficiario = clean_and_cut_text(value, 18)

    @property
    def cuenta_beneficiario(self):
        return self.__cuenta_beneficiario

    @cuenta_beneficiario.setter
    def cuenta_beneficiario(self, value):
        self.__cuenta_beneficiario = clean_and_cut_text(value, 20)

    @property
    def institucion_contraparte(self):
        return self.__institucion_contraparte

    @institucion_contraparte.setter
    def institucion_contraparte(self, value):
        self.__institucion_contraparte = clean_and_cut_text(value, 5)

    @property
    def concepto_pago(self):
        return self.__concepto_pago

    @concepto_pago.setter
    def concepto_pago(self, value):
        self.__concepto_pago = clean_and_cut_text(value, 40)

    @property
    def email_beneficiario(self):
        return self.__email_beneficiario

    @email_beneficiario.setter
    def email_beneficiario(self, value):
        self.__email_beneficiario = clean_and_cut_text(value, 120)

    @property
    def monto(self):
        return self.__monto

    @monto.setter
    def monto(self, value):
        self.__monto = number_format(value, 2)

    @property
    def nombre_beneficiario(self):
        return self.__nombre_beneficiario

    @nombre_beneficiario.setter
    def nombre_beneficiario(self, value):
        self.__nombre_beneficiario = clean_and_cut_text(value, 40)

    @property
    def rfc_curp_beneficiario(self):
        return self.__rfc_curp_beneficiario

    @rfc_curp_beneficiario.setter
    def rfc_curp_beneficiario(self, value):
        self.__rfc_curp_beneficiario = clean_and_cut_text(value, 18)

    @property
    def firma(self):
        string_to_sign = '||{}|{}|{}||{}|{}|{}|{}|||{}||{}|{}|{}|{}|{}|||||{}||||||{}||||||||'.format(
                self.__institucion_contraparte,
                self.__empresa,
                self.__fecha_operacion,
                self.__clave_rastreo,
                self.__institucion_operante,
                self.__monto,
                self.__tipo_pago,
                self.__cuenta_ordenante,
                self.__tipo_cuenta_beneficiario,
                self.__nombre_beneficiario,
                self.__cuenta_beneficiario,
                self.__rfc_curp_beneficiario,
                self.__email_beneficiario,
                self.__concepto_pago,
                self.__referencia_numerica
            )

        return string_to_sign
